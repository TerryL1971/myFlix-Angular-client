{"ast":null,"code":"import { catchError } from 'rxjs/internal/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst apiUrl = 'https://myflix-app-2021.herokuapp.com/';\nexport let FetchApiDataService = /*#__PURE__*/(() => {\n  class FetchApiDataService {\n    //Inject the HttpClient module to the constructor params\n    //This will provide HttpClient to the entire class, making it available via this.http\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n    } // Non-typed response extraction\n\n\n    extractResponseData(res) {\n      const body = res;\n      return body || {};\n    } // Register user\n\n\n    userRegistration(userDetails) {\n      console.log(userDetails);\n      return this.http.post(apiUrl + 'users', userDetails).pipe(catchError(this.userRegistrationHandleError));\n    }\n\n    userRegistrationHandleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      if (error.status === 400) {\n        return throwError(`Username ${error.error}. Please login to your account`);\n      } else {\n        return throwError(`Error registering user, please check all required fields`);\n      }\n    } // Login user\n\n\n    userLogin(userDetails) {\n      console.log(userDetails);\n      return this.http.post(apiUrl + 'login', userDetails).pipe(catchError(this.userLoginHandleError));\n    }\n\n    userLoginHandleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Error logging in, please try again!');\n    } // get user info\n\n\n    getUser(user) {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + `users/${user}`, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.getUserHandleError));\n    }\n\n    getUserHandleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Error retrieving user account data');\n    } // update user data\n\n\n    updateUser(userDetails) {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      return this.http.put(apiUrl + `users/${user}`, userDetails, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.editUserHandleError));\n    }\n\n    editUserHandleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Error updating user info');\n    } // delete user account\n\n\n    deleteUser() {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      return this.http.delete(apiUrl + `users/${user}`, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.deleteUserHandleError));\n    }\n\n    deleteUserHandleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Error deleting profile');\n    } // Return all movies in database\n\n\n    getAllMovies() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.getAllMoviesHandleError));\n    }\n\n    getAllMoviesHandleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Error extracting movie data');\n    } // get movie details / get movie by title\n\n\n    getAllMovieDetails() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies/title:Description', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.getAllMovieDetailsHandleError));\n    }\n\n    getAllMovieDetailsHandleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Error retieving movie details');\n    } // Add movies to favorites\n\n\n    addFavorite(id) {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      return this.http.post(apiUrl + `users/${user}/movies/${id}`, id, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.addFavoriteHandleError));\n    }\n\n    addFavoriteHandleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Error adding movie to favorites list');\n    } // Remove movies from favorites\n\n\n    removeFavorite(id) {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      return this.http.delete(apiUrl + `users/${user}/movies/${id}`, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.removeFavoriteHandleError));\n    }\n\n    removeFavoriteHandleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Error adding movie to favorites list');\n    } // get director\n\n\n    getDirector() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies/directors/:Name', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.getDirectorHandleError));\n    }\n\n    getDirectorHandleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Error retieving director view');\n    } // get genre\n\n\n    getGenre() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies/genres/:Name', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.getGenreHandleError));\n    }\n\n    getGenreHandleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Error retieving genre view');\n    }\n\n  }\n\n  FetchApiDataService.ɵfac = function FetchApiDataService_Factory(t) {\n    return new (t || FetchApiDataService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  FetchApiDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FetchApiDataService,\n    factory: FetchApiDataService.ɵfac,\n    providedIn: 'root'\n  });\n  return FetchApiDataService;\n})();","map":null,"metadata":{},"sourceType":"module"}