{"version":3,"sources":["fetch-api-data.service.ts"],"names":["core_1","require","operators_1","http_1","rxjs_1","operators_2","apiUrl","UserRegistrationService","http","this","prototype","userRegistration","userDetails","console","log","post","pipe","catchError","handleError","error","ErrorEvent","message","status","throwError","userLogin","userLoginHandleError","getAllMovies","token","localStorage","getItem","get","headers","HttpHeaders","Authorization","map","extractResponseData","res","getMovieByTitle","getMovieByTitleHandleError","getDirector","getDirectorHandleError","getGenre","getGenreHandleError","getUser","user","getUserHandleError","getFavorite","id","addFavoriteHandleError","getFavoriteHandleError","addFavorite","updateUser","put","editUserHandleError","deleteUser","deleteUserHandleError","removeFavorite","removeFavoriteHandleError","__decorate","Injectable","providedIn","exports"],"mappings":"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","file":"fetch-api-data.service.min.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { catchError } from 'rxjs/internal/operators';\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpErrorResponse,\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nconst apiUrl = 'https://myflix-app-2021.herokuapp.com/';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserRegistrationService {\n  constructor(private http: HttpClient) {}\n  public userRegistration(userDetails: any): Observable<any> {\n    console.log(userDetails);\n    return this.http\n      .post(apiUrl + 'users', userDetails)\n      .pipe(catchError(this.handleError));\n  }\n\n  private handleError(error: HttpErrorResponse): any {\n    if (error.error instanceof ErrorEvent) {\n      console.error('Some error occurred:', error.error.message);\n    } else {\n      console.error(\n        `Error Status code ${error.status},` + `Error body is: ${error.error}`\n      );\n    }\n    return throwError('Something went wrong - please try again later!');\n  }\n\n  // User login\n  public userLogin(userDetails: any): Observable<any> {\n    console.log(userDetails);\n    return this.http\n      .post(apiUrl + 'login', userDetails)\n      .pipe(catchError(this.userLoginHandleError));\n  }\n\n  private userLoginHandleError(error: HttpErrorResponse): any {\n    if (error.error instanceof ErrorEvent) {\n      console.error('Some error occurred:', error.error.message);\n    } else {\n      console.error(\n        `Error Status code ${error.status}, ` + `Error body is: ${error.error}`\n      );\n    }\n    return throwError('Error logging in, please try again!');\n  }\n\n  // Get all movies\n  getAllMovies(): Observable<any> {\n    const token = localStorage.getItem('token');\n    return this.http\n      .get(apiUrl + 'movies', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token,\n        }),\n      })\n      .pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  // Non-typed response extraction\n  private extractResponseData(res: Response): any {\n    const body = res;\n    return body || {};\n  }\n\n  // Get movie by title\n  getMovieByTitle(): Observable<any> {\n    const token = localStorage.getItem('token');\n    return this.http\n      .get(apiUrl + 'movies/:Title', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token,\n        }),\n      })\n      .pipe(\n        map(this.extractResponseData),\n        catchError(this.getMovieByTitleHandleError)\n      );\n  }\n\n  private getMovieByTitleHandleError(error: HttpErrorResponse): any {\n    if (error.error instanceof ErrorEvent) {\n      console.error('Some error occurred:', error.error.message);\n    } else {\n      console.error(\n        `Error Status code ${error.status}, ` + `Error body is: ${error.error}`\n      );\n    }\n    return throwError('Error retieving movie details');\n  }\n\n  // Get director\n  getDirector(): Observable<any> {\n    const token = localStorage.getItem('token');\n    return this.http\n      .get(apiUrl + 'movies/directors/:Name', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token,\n        }),\n      })\n      .pipe(\n        map(this.extractResponseData),\n        catchError(this.getDirectorHandleError)\n      );\n  }\n\n  private getDirectorHandleError(error: HttpErrorResponse): any {\n    if (error.error instanceof ErrorEvent) {\n      console.error('Some error occurred:', error.error.message);\n    } else {\n      console.error(\n        `Error Status code ${error.status}, ` + `Error body is: ${error.error}`\n      );\n    }\n    return throwError('Error retieving director view');\n  }\n\n  // Get genre\n  getGenre(): Observable<any> {\n    const token = localStorage.getItem('token');\n    return this.http\n      .get(apiUrl + 'movies/genres/:Name', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token,\n        }),\n      })\n      .pipe(\n        map(this.extractResponseData),\n        catchError(this.getGenreHandleError)\n      );\n  }\n\n  private getGenreHandleError(error: HttpErrorResponse): any {\n    if (error.error instanceof ErrorEvent) {\n      console.error('Some error occurred:', error.error.message);\n    } else {\n      console.error(\n        `Error Status code ${error.status}, ` + `Error body is: ${error.error}`\n      );\n    }\n    return throwError('Error retieving genre view');\n  }\n\n  // Get user\n  getUser(user: any): Observable<any> {\n    const token = localStorage.getItem('token');\n    return this.http\n      .get(apiUrl + `users/${user}`, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token,\n        }),\n      })\n      .pipe(map(this.extractResponseData), catchError(this.getUserHandleError));\n  }\n\n  private getUserHandleError(error: HttpErrorResponse): any {\n    if (error.error instanceof ErrorEvent) {\n      console.error('Some error occurred:', error.error.message);\n    } else {\n      console.error(\n        `Error Status code ${error.status}, ` + `Error body is: ${error.error}`\n      );\n    }\n    return throwError('Error retrieving user account data');\n  }\n\n  // Get favorite movies for a user\n  getFavorite(id: string): Observable<any> {\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('user');\n    return this.http\n      .get(apiUrl + `users/${user}/favorites/${id}`, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token,\n        }),\n      })\n      .pipe(\n        map(this.extractResponseData),\n        catchError(this.addFavoriteHandleError)\n      );\n  }\n\n  private getFavoriteHandleError(error: HttpErrorResponse): any {\n    if (error.error instanceof ErrorEvent) {\n      console.error('Some error occurred:', error.error.message);\n    } else {\n      console.error(\n        `Error Status code ${error.status}, ` + `Error body is: ${error.error}`\n      );\n    }\n    return throwError('Error adding movie to favorites list');\n  }\n\n  // Add movies to favorites\n  addFavorite(id: string): Observable<any> {\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('user');\n    return this.http\n      .post(apiUrl + `users/${user}/favorites/${id}`, id, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token,\n        }),\n      })\n      .pipe(\n        map(this.extractResponseData),\n        catchError(this.addFavoriteHandleError)\n      );\n  }\n\n  private addFavoriteHandleError(error: HttpErrorResponse): any {\n    if (error.error instanceof ErrorEvent) {\n      console.error('Some error occurred:', error.error.message);\n    } else {\n      console.error(\n        `Error Status code ${error.status}, ` + `Error body is: ${error.error}`\n      );\n    }\n    return throwError('Error adding movie to favorites list');\n  }\n\n  // Edit user\n  updateUser(userDetails: any): Observable<any> {\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('user');\n    return this.http\n      .put(apiUrl + `users/${user}`, userDetails, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token,\n        }),\n      })\n      .pipe(\n        map(this.extractResponseData),\n        catchError(this.editUserHandleError)\n      );\n  }\n\n  private editUserHandleError(error: HttpErrorResponse): any {\n    if (error.error instanceof ErrorEvent) {\n      console.error('Some error occurred:', error.error.message);\n    } else {\n      console.error(\n        `Error Status code ${error.status}, ` + `Error body is: ${error.error}`\n      );\n    }\n    return throwError('Error updating user info');\n  }\n\n  // Delete user\n  deleteUser(): Observable<any> {\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('user');\n    return this.http\n      .delete(apiUrl + `users/${user}`, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token,\n        }),\n      })\n      .pipe(\n        map(this.extractResponseData),\n        catchError(this.deleteUserHandleError)\n      );\n  }\n\n  private deleteUserHandleError(error: HttpErrorResponse): any {\n    if (error.error instanceof ErrorEvent) {\n      console.error('Some error occurred:', error.error.message);\n    } else {\n      console.error(\n        `Error Status code ${error.status}, ` + `Error body is: ${error.error}`\n      );\n    }\n    return throwError('Error deleting profile');\n  }\n\n  // Delete a movie from the favorite movies\n  removeFavorite(id: string): Observable<any> {\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('user');\n    return this.http\n      .delete(apiUrl + `users/${user}/favorites/${id}`, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token,\n        }),\n      })\n      .pipe(\n        map(this.extractResponseData),\n        catchError(this.removeFavoriteHandleError)\n      );\n  }\n\n  private removeFavoriteHandleError(error: HttpErrorResponse): any {\n    if (error.error instanceof ErrorEvent) {\n      console.error('Some error occurred:', error.error.message);\n    } else {\n      console.error(\n        `Error Status code ${error.status}, ` + `Error body is: ${error.error}`\n      );\n    }\n    return throwError('Error adding movie to favorites list');\n  }\n}\n"]}